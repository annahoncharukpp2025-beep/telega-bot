import asyncio
import sys
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    PicklePersistence,
)

# üîß Windows event loop fix
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# === –¢–æ–∫–µ–Ω ===
TOKEN = "8215851506:AAGAwCqPLVbZq26H8E60mkgQ2xE-rycP2Bs"

# === –°—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É ===
ASK_NAME, ASK_SUBGROUP, MAIN_MENU = range(3)

# === –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
ALLOWED_USERS = [
    "–ë–∏—Ä–∫–∞ –•—Ä–∏—Å—Ç–∏–Ω–∞",
    "–ë—É–ª–∏–≥–∞ –ù–∞–∑–∞—Ä—ñ–π",
    "–ë—É—Ä–±–∞ –î–∞—Ä—ñ—è",
    "–ì–∞–≤—Ä–∏–ª–æ–≤–∞ –û–ª—å–≥–∞",
    "–ì–∞–ª–∞–º–∞–π –Ñ–ª–∏–∑–∞–≤–µ—Ç–∞",
    "–ì–æ–Ω—á–∞—Ä—É–∫ –î–∞—Ä'—è",
    "–ì–æ–Ω—á–∞—Ä—É–∫ –ê–Ω–Ω–∞",
    "–ì–æ—Ä–¥—ñ—î–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π",
    "–î—î–¥—É—Ö –Ü–ª–ª—è",
    "–Ü–≤–∞–Ω—ñ–≤ –ê–Ω–≥–µ–ª—ñ–Ω–∞",
    "–Ü–≤–∞–Ω—á–µ–Ω–∫–æ –ó–∞—Ö–∞—Ä",
    "–ö–∞–ª—É–∂–Ω–∞ –ê–Ω–Ω–∞",
    "–ö–∞—Ä—Å—å–∫–∞ –î–∞—Ä'—è",
    "–ö–æ–∑–∞–∫ –û–ª–µ–Ω–∞",
    "–ú–∞—Ç–≤—ñ—ó—à–∏–Ω –Æ–ª—ñ—è",
    "–ú–µ–¥–≤–µ–¥—î–≤–∞ –Ñ–ª–∏–∑–∞–≤–µ—Ç–∞",
    "–ú–æ–≤—á–∞–Ω –†–æ—Å—Ç–∏—Å–ª–∞–≤",
    "–ù–∏—Å–∏–Ω–µ—Ü—å –ó–ª–∞—Ç–æ—Å–ª–∞–≤–∞",
    "–ü–∞–≤–ª—é–∫ –í–∞—Å–∏–ª—å",
    "–ü–ª–µ—á—ñ–π –ú–∞–∫—Å–∏–º",
    "–†—É–¥–∏–π –õ—é–±–æ–º–∏—Ä",
    "–†—É—Å–∏–Ω—á—É–∫ –Æ–ª—ñ—è",
    "–°–∞–¥–æ–≤–∏–π –ê–Ω–¥—Ä—ñ–π",
    "–°–ª–æ–±–æ–¥—è–Ω –ê–Ω–∞—Å—Ç–∞—Å—ñ—è",
    "–ß–µ—Ä–Ω–∏—à–µ–Ω–∫–æ –ö–∞—Ç–µ—Ä–∏–Ω–∞",
    "–Ø–≤–æ—Ä—Å—å–∫–∏–π –ù–∞–∑–∞—Ä—ñ–π",
    "–Ø—Ä—Ç–∏–º –ú–∞—Ö–Ω–∏–∫ –î–∞–Ω–∏—ó–ª",
    "–Ø—Ü–∫—ñ–≤ –í–æ–ª–æ–¥–∏–º–∏—Ä-–õ—É–∫–∞",
]

# === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
MAIN_MENU_BUTTONS = [
    ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –î–ó", "–ó–∞–ø–∏—Å–∞—Ç–∏ –î–ó"],
    ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞"],
]


# === /start ‚Äî –ø–µ—Ä—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É üïä", callback_data="slava")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üïä", reply_markup=reply_markup)


# === –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ‚Äú–°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É‚Äù ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–°–ª–∞–≤–∞ –ù–∞–≤—ñ–∫–∏ –ë–æ–≥—É üôè\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è)."
    )

    context.user_data["state"] = ASK_NAME


# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("state")
    user_id = update.effective_user.id

    # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞ —ñ–º–µ–Ω
    if "used_names" not in context.application_data:
        context.application_data["used_names"] = {}

    used_names = context.application_data["used_names"]

    # --- –∫—Ä–æ–∫ 1: –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ ---
    if state == ASK_NAME:
        name = update.message.text.strip()

        # 1Ô∏è‚É£ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —á–∏ —î —ñ–º‚Äô—è —É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
        if name not in ALLOWED_USERS:
            await update.message.reply_text(
                "üö´ –í–∏–±–∞—á, –∞–ª–µ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∞–ª—É–∂–Ω–∞ –ê–Ω–Ω–∞)."
            )
            context.user_data["state"] = ASK_NAME
            return

        # 2Ô∏è‚É£ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —á–∏ —ñ–º‚Äô—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        if name in used_names and used_names[name] != user_id:
            await update.message.reply_text(
                "‚ùå –¶–µ —ñ–º‚Äô—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î —Å–ø—Ä–∞–≤–∂–Ω—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è."
            )
            context.user_data["state"] = ASK_NAME
            return

        # 3Ô∏è‚É£ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º‚Äô—è –∑–∞ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        used_names[name] = user_id
        context.application_data["used_names"] = used_names

        context.user_data["name"] = name
        context.user_data["state"] = ASK_SUBGROUP

        await update.message.reply_text(
            f"‚úÖ –í—ñ—Ç–∞—é, {name}!\n\n–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –ø—ñ–¥–≥—Ä—É–ø—É:",
            reply_markup=ReplyKeyboardMarkup(
                [["1 –ø—ñ–¥–≥—Ä—É–ø–∞", "2 –ø—ñ–¥–≥—Ä—É–ø–∞"]],
                one_time_keyboard=True,
                resize_keyboard=True,
            ),
        )
        return

    # --- –∫—Ä–æ–∫ 2: –≤–∏–±—ñ—Ä –ø—ñ–¥–≥—Ä—É–ø–∏ ---
    elif state == ASK_SUBGROUP:
        subgroup = update.message.text.strip()
        if subgroup not in ["1 –ø—ñ–¥–≥—Ä—É–ø–∞", "2 –ø—ñ–¥–≥—Ä—É–ø–∞"]:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
            return

        context.user_data["subgroup"] = subgroup
        context.user_data["state"] = MAIN_MENU

        await update.message.reply_text(
            f"–ü—ñ–¥–≥—Ä—É–ø—É '{subgroup}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
        )
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá")
        return

    # --- –∫—Ä–æ–∫ 3: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
    elif state == MAIN_MENU:
        text = update.message.text.strip()
        if text in ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –î–ó", "–ó–∞–ø–∏—Å–∞—Ç–∏ –î–ó", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞"]:
            await update.message.reply_text(f"üîß –§—É–Ω–∫—Ü—ñ—è '{text}' —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é üëá")

    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.")


# === /cancel ‚Äî –≤–∏—Ö—ñ–¥ —ñ–∑ –±–æ—Ç–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –∑–≤—ñ–ª—å–Ω—è—î–º–æ —ñ–º‚Äô—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    if "name" in context.user_data and "used_names" in context.application_data:
        name = context.user_data["name"]
        used_names = context.application_data["used_names"]

        if name in used_names and used_names[name] == user_id:
            del used_names[name]
            context.application_data["used_names"] = used_names
            await update.message.reply_text(f"üîì –Ü–º‚Äô—è '{name}' –∑–≤—ñ–ª—å–Ω–µ–Ω–æ.")

    context.user_data.clear()
    await update.message.reply_text("‚ùå –†–æ–∑–º–æ–≤—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–ø–∏—à–∏ /start.")


# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    persistence = PicklePersistence(filepath="bot_data.pkl")
    app = ApplicationBuilder().token(TOKEN).persistence(persistence).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
    app.run_polling()


if __name__ == "__main__":
    main()
